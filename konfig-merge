#!/usr/bin/env bash

# Copyright 2019 Cornelius Weig
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

[[ -n $DEBUG ]] && set -x

set -eou pipefail
IFS=$':\n\t'

declare -a TMPFILES=()
cleanup() {
  if [[ "${#TMPFILES[@]}" -gt 0 ]]; then
    rm -- "${TMPFILES[@]}"
  fi
}
trap cleanup EXIT

usage() {
  cat <<'EOF'
USAGE:
  konfig-merge [<CONFIG>..]                         : merge multiple kubeconfigs
  konfig-merge -e,--export <CONTEXT> [<CONFIG>]    : export kubeconfig for given context
  konfig-merge -p,--preserve-structure [<CONFIG>..] : merge and flatten kubeconfigs
      CAVEAT: -p mode will break file links with relative paths

  konfig-merge -h,--help                            : show this message
EOF
}

error() {
  echo "error: $1" >&2
  exit 1
}

merge() {
    if [[ "$1" =~ ^-(.*) && "$1" != '-p' && "$1" != '--preserve-structure' ]]; then
      error "unrecognized flag \"$1\""
    elif [[ "$1" == '-p' || "$1" == '--preserve-structure' ]]; then
      KUBECONFIG="${*:2}" $KUBECTL config view --raw --merge
    else
      KUBECONFIG="$*" $KUBECTL config view --flatten --merge
    fi
}

import_ctx() {
    if [[ "${1}" =~ -(.*) ]]; then
      error "unrecognized flag \"$1\""
    fi
    local tmpcfg=$(mktemp konfig_XXX)
    TMPFILES+=( "$tmpcfg" )
    $KUBECTL config view --raw > "$tmpcfg"

    merge "$tmpcfg" "$@"
}

export_contexts() {
    declare -a ctxs=()
    declare -a cfgs=()
    declare -a tmpcfgs=()
    local tmpcfg

    while [[ "$#" -gt 0 ]]; do
      if [[ "$1" == '--kubeconfig' ]]; then
        cfgs+=( "${2//,/:}" )
        shift 2
      elif [[ "$1" =~ ^-(.*) ]]; then
        error "unrecognized flag \"$1\""
      else
        ctxs+=( "$1" )
        shift
      fi
    done

    if [[ "${#ctxs[@]}" -eq 0 ]]; then
      error "contexts to export are missing"
    fi

    for x in "${ctxs[@]}"; do
      tmpcfg=$(mktemp konfig_XXX)
      TMPFILES+=( "$tmpcfg" )
      tmpcfgs+=( "$tmpcfg" )
      if [[ "${#cfgs[@]}" -eq 0 ]]; then
        $KUBECTL config view --flatten --minify --context="$x" > "$tmpcfg"
      else
        KUBECONFIG="${cfgs[*]}" $KUBECTL config view --flatten --minify --context="$x" > "$tmpcfg"
      fi
    done

    merge "${tmpcfgs[@]}"
}

main() {
  if hash kubectl 2>/dev/null; then
    KUBECTL=kubectl
  elif hash kubectl.exe 2>/dev/null; then
    KUBECTL=kubectl.exe
  else
    echo >&2 "kubectl is not installed"
    exit 1
  fi

  if [[ "$#" -eq 0 ]]; then
    usage
    return
  fi

  case "$1" in
  '-h' | '--help' | 'help')
    usage
    ;;
  'export')
    export_contexts "${@:2}"
    ;;
  'import')
    import_ctx "${@:2}"
    ;;
  'merge')
    merge "${@:2}"
    ;;
   -*)
    usage
    error "unrecognized flag \"${1}\""
    ;;
   *)
    usage
    error "unknown command \"$1\""
  esac

}

main "$@"
